{"version":3,"file":"static/js/927.0be1a824.chunk.js","mappings":"iKAAO,MAAMA,EAAY,CACvB,CACE,SAAY,MACZ,eAAkB,2LAClB,WAAc,OACd,kBAAqB,CACnB,yJACA,2FAEF,SAAY,oDACZ,KAAQ,UAEV,CACE,SAAY,MACZ,eAAkB,sBAClB,WAAc,OACd,kBAAqB,CACnB,sBACA,qBACA,wBAEF,SAAY,0LACZ,KAAQ,UAEV,CACE,SAAY,MACZ,eAAkB,8PAClB,WAAc,OACd,kBAAqB,CACnB,gNACA,6MAEF,SAAY,yCACZ,KAAQ,UAEV,CACE,SAAY,MACZ,eAAkB,8GAClB,WAAc,OACd,kBAAqB,CACnB,kEACA,qHAEF,SAAY,4JACZ,KAAQ,UAEV,CACE,SAAY,MACZ,eAAkB,qGAClB,WAAc,OACd,kBAAqB,CACnB,kDACA,+CACA,mDAEF,SAAY,gNACZ,KAAQ,UAEV,CACE,SAAY,MACZ,eAAkB,qBAClB,WAAc,OACd,kBAAqB,CACnB,wCACA,gCACA,0CAEF,SAAY,wGACZ,KAAQ,UAEV,CACE,SAAY,MACZ,eAAkB,oKAClB,kBAAqB,CACnB,gDACA,wJAEF,SAAY,6RACZ,KAAQ,UAEV,CACE,SAAY,MACZ,eAAkB,+NAClB,kBAAqB,CACnB,4BACA,2QAEF,SAAY,8UACZ,KAAQ,WC1ECC,EAAW,CACtBC,EAAAA,EAAKC,IAAI,qBAXuEC,IAChF,MAAMC,EAAM,IAAIC,IAAIF,EAAIG,QAAQF,KACjBA,EAAIG,aAAaL,IAAI,UAClBE,EAAIG,aAAaL,IAAI,cAC1BE,EAAIG,aAAaL,IAAI,QAClC,OAAOM,EAAAA,EAAaC,KAAK,CACvBC,QAASX,GACT,KCRSY,GAASC,EAAAA,EAAAA,MAAeZ,E","sources":["mocks/data.js","mocks/handlers.ts","mocks/browser.ts"],"sourcesContent":["export const questions = [\n  {\n    \"category\": \"css\",\n    \"correct_answer\": \"선택자(’스타일링 하는 대상’)과 선언(’스타일링 방법’)의 조합이다.\",\n    \"difficulty\": \"easy\",\n    \"incorrect_answers\": [\n      \"특정 프로퍼티를 스타일링하는 ‘방법’에 대한 지침이다.\",  \n      \"외부 CSS 파일을 지목하는 import 문이다.\"\n    ],\n    \"question\": \"CSS ‘규칙 (Rule)’ 이란?\",\n    \"type\": \"single\"\n  },\n  {\n    \"category\": \"css\",\n    \"correct_answer\": \".page-title { ... }\",\n    \"difficulty\": \"easy\",\n    \"incorrect_answers\": [\n      \"#page-title { ... }\",\n      \"page-title { ... }\",\n      \"[page-title] { ... }\"\n    ],\n    \"question\": \"어떤 선택자로 이 요소를 선택할 수 있을까요? &lt;h1 class='page-title'&gt;Dive into the core features&lt;/h1&gt;\",\n    \"type\": \"single\"\n  },\n  {\n    \"category\": \"css\",\n    \"correct_answer\": \"명시도는 여러 CSS 규칙이 동일한 요소를 대상으로 할 때 발생하는 충돌을 해결하는 것이 핵심입니다.\",\n    \"difficulty\": \"easy\",\n    \"incorrect_answers\": [\n      \"명시도는 CSS 모범 사례로서 가장 명시적인 선택자로 요소를 선택하도록 지시한다.\",\n      \"명시도는 여러 CSS 규칙이 동일한 요소를 대상으로 할 수 있다는 사실을 보여준다.\"\n    ],\n    \"question\": \"명시도(Specificity)란?\",\n    \"type\": \"single\"\n  },\n  {\n    \"category\": \"css\",\n    \"correct_answer\": \"코드 유지와 예측이 어려워지기 때문이다.\",\n    \"difficulty\": \"easy\",\n    \"incorrect_answers\": [\n      \"명시도가 낮기 때문이다.\",\n      \"일부 HTML 요소에서만 사용할 수 있기 때문이다.\"\n    ],\n    \"question\": \"인라인 스타일 (`&lt;div style=&rdquo;&hellip;&rdquo;&gt;`)을 사용하면 안 되는 이유는?\",\n    \"type\": \"single\"\n  },\n  {\n    \"category\": \"css\",\n    \"correct_answer\": \"‘absolute(절대적)’값 및 ‘fixed(고정된)’ 값\",\n    \"difficulty\": \"easy\",\n    \"incorrect_answers\": [\n      \"‘relative(상대적)’ 값\" ,\n      \"‘fixed(고정된)’ 값\",\n      \"‘absolute(절대적)’ 값\"\n    ],\n    \"question\": \"‘배치(position)’ 프로퍼티에 어떤 값을 적용하면 요소를 문서 대열에서 제거할까요?\",\n    \"type\": \"single\"\n  },\n  {\n    \"category\": \"css\",\n    \"correct_answer\": \"뷰포트\",\n    \"difficulty\": \"easy\",\n    \"incorrect_answers\": [\n      \"컨테이닝 블록\",\n      \"‘html’ 요소\",\n      \"해당 요소 자신\"\n    ],\n    \"question\": \"position: fixed 를 적용한 후, 요소의 배치 기준은?\",\n    \"type\": \"single\"\n  },\n  {\n    \"category\": \"css\",\n    \"correct_answer\": \"자식 요소가 ‘absolute’라는 ‘position’값을 가질 경우 배치 컨텍스트\",\n    \"incorrect_answers\": [\n      \"문서 대열 내 배치\",\n      \"자식 요소에 ‘position: fixed’ 선언이 적용된 경우 배치 컨텍스트\"\n    ],\n    \"question\": \"‘static(정적인)’ 값 이외의 값을 갖는 ‘position’ 프로퍼티를 부모 요소에 추가하면 자식 요소의 무엇이 변경될까요?\",\n    \"type\": \"single\"\n  },\n  {\n    \"category\": \"css\",\n    \"correct_answer\": \"아니다. ‘position’ 프로퍼티에 기본값(’static’)이 아닌 다른 값을 먼저 추가할 필요가 있다.\",\n    \"incorrect_answers\": [\n      \"사실이다.\",\n      \"아니다. 우선 요소에 ‘position’ 프로퍼티를 추가한 다음에 이런 프로퍼티를 사용해 배치를 변경할 수 있다.\"\n    ],\n    \"question\": \"‘top(상단)’, ‘bottom(하단)’, ‘left(왼쪽)’, ‘right(오른쪽)’ 프로퍼티를 추가하면 웹 사이트상 요소의 배치를 언제든지 변경시킬 수 있다.\",\n    \"type\": \"single\"\n  }\n]","import { HttpResponse, http } from 'msw'\nimport { questions } from './data'\n\n// request, params, cookies\nconst fetchQuizQuestions = <T extends { request: any, params: any, cookies: any}>(ctx: T) => {\n  const url = new URL(ctx.request.url)\n  const amount = url.searchParams.get('amount')\n  const difficulty= url.searchParams.get('difficulty')\n  const type = url.searchParams.get('type')\n  return HttpResponse.json({\n    results: questions\n  })\n}\n\nexport const handlers = [\n  http.get(`/api/v1/questions`, fetchQuizQuestions)\n]\n","import { setupWorker } from 'msw/browser'\nimport { handlers } from './handlers'\n\nexport const worker = setupWorker(...handlers)"],"names":["questions","handlers","http","get","ctx","url","URL","request","searchParams","HttpResponse","json","results","worker","setupWorker"],"sourceRoot":""}